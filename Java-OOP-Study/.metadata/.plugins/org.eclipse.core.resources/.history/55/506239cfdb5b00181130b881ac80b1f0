package com.study.planeWar;

import java.awt.Font;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * 
 * @author Phree 
 */
public class PlaneGame extends JPanel {

	public static final int WIDTH = 400; // 宽
	public static final int HEIGHT = 654; // 高

	// 简单状态机
	private int state;
	private static final int START = 0;
	private static final int RUNNING = 1;
	private static final int PAUSE = 2;
	private static final int GAMEOVER = 3;

	private int score = 0;
	private Timer timer; // 定时器对象
	private int period = 10; // 线程执行间隔，10毫秒

	//负责游戏难度的管理
	private static GameManager gameManager;


	// 图片资源
	public static BufferedImage background;
	public static BufferedImage start;
	public static BufferedImage airplane;
	public static BufferedImage bee;
	public static BufferedImage bullet;
	public static BufferedImage player0;
	public static BufferedImage player1;
	public static BufferedImage pause;
	public static BufferedImage gameover;
	public static BufferedImage superenemy;
	public static BufferedImage enemybullet;

	private FlyObject[] enemys = {}; // 敌机数组
	private Bullet[] bullets = {}; // 子弹数组
	private EnemyBullet[] ebullets = {};
	private Player player = new Player(); // 玩家对象

	static { // 静态代码块，初始化图片资源
		try {
			background = ImageIO.read(PlaneGame.class.getResource("/background.png"));
			start = ImageIO.read(PlaneGame.class.getResource("/start.png"));
			airplane = ImageIO.read(PlaneGame.class.getResource("/airplane.png"));
			bee = ImageIO.read(PlaneGame.class.getResource("/bee.png"));
			bullet = ImageIO.read(PlaneGame.class.getResource("/bullet.png"));
			player0 = ImageIO.read(PlaneGame.class.getResource("/player0.png"));
			player1 = ImageIO.read(PlaneGame.class.getResource("/player1.png"));
			pause = ImageIO.read(PlaneGame.class.getResource("/pause.png"));
			gameover = ImageIO.read(PlaneGame.class.getResource("/gameover.png"));
			superenemy = ImageIO.read(PlaneGame.class.getResource("/superenemy.png"));
			enemybullet = ImageIO.read(PlaneGame.class.getResource("/enemybullet.png"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 主程序入口
	public static void main(String[] args) {
		JFrame frame = new JFrame("Game");
		PlaneGame planegame = new PlaneGame();
		frame.add(planegame);
		frame.setSize(WIDTH, HEIGHT); // 设置宽高
		frame.setAlwaysOnTop(true); // 设置其总在最上
		frame.setIconImage(new ImageIcon("images/icon.jpg").getImage()); // 设置图标
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null); 
		frame.setVisible(true); 

		planegame.action(); 
	}

	@Override
	public void paint(Graphics g) {
		g.drawImage(background, 0, 0, null); // 画背景图
		paintplayer(g); // 画英雄机
		paintBullets(g); // 画子弹
		paintFlyObjects(g); // 画飞行物
		paintInfo(g); // 画分数
		paintState(g); // 画游戏状态
	}

	public void paintplayer(Graphics g) {
		g.drawImage(player.getSprite(), player.getX(), player.getY(), null);
	}

	public void paintBullets(Graphics g) {
		for (int i = 0; i < bullets.length; i++) {
			Bullet b = bullets[i];
			g.drawImage(b.getSprite(), b.getX() - b.getWidth() / 2, b.getY(), null);
		}
		for (int i = 0; i < ebullets.length; i++) {
			EnemyBullet b = ebullets[i];
			g.drawImage(b.getSprite(), b.getX() - b.getWidth() / 2, b.getY(), null);
		}
	}

	public void paintFlyObjects(Graphics g) {
		for (int i = 0; i < enemys.length; i++) {
			FlyObject f = enemys[i];
			g.drawImage(f.getSprite(), f.getX(), f.getY(), null);
		}
	}

	public void paintInfo(Graphics g) {
		int x = 10; // x坐标
		int y = 25; // y坐标
		Font font = new Font(Font.SANS_SERIF, Font.BOLD, 14); // 字体
		g.setColor(new Color(0x3A3B3B));
		g.setFont(font); // 设置字体
		g.drawString("SCORE:" + score, x, y); // 画分数
		y += 20;
		g.drawString("LIFE:" + player.getLife(), x, y); // 画命
		y += 20;
		g.drawString("RANK:" + gameManager.getRankinfo(), x, y); // 级别
	}

	public void paintState(Graphics g) {
		switch (state) {
		case START: // 启动状态
			g.drawImage(start, 0, 0, null);
			break;
		case PAUSE: // 暂停状态
			g.drawImage(pause, 0, 0, null);
			break;
		case GAMEOVER: // 游戏终止状态
			g.drawImage(gameover, 0, 0, null);
			break;
		}
	}

	public void action() {
		// 鼠标监听事件
		MouseAdapter l = new MouseAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) { // 鼠标移动
				if (state == RUNNING) { // 运行状态下移动英雄机--随鼠标位置
					int x = e.getX();
					int y = e.getY();
					player.moveTo(x, y);
				}
			}

			@Override
			public void mouseEntered(MouseEvent e) { // 进入
				if (state == PAUSE) { // 暂停状态切换
					state = RUNNING;
				}
			}

			@Override
			public void mouseExited(MouseEvent e) { // 退出
				if (state != GAMEOVER && state != START)
					state = PAUSE;
			}

			@Override
			public void mouseClicked(MouseEvent e) { // 点击
				switch (state) {
				case START:
					state = RUNNING; // 启动状态下运行
					break;
				case GAMEOVER: // 游戏结束重新初始化
					enemys = new FlyObject[0];
					bullets = new Bullet[0];
					ebullets = new EnemyBullet[0];
					player = new Player();
					score = 0;
					state = START;
					break;
				}
			}
		};
		this.addMouseListener(l); // 鼠标监听
		this.addMouseMotionListener(l); // 鼠标滑动

		timer = new Timer(); // 主流程控制
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				if (state == RUNNING) { // 运行状态
					rankConfirmAction(); //检查游戏等级
					enterAction(); // 飞行物入场
					stepAction(); // 走一步
					shootAction(); // 射击
					BulletHitAction(); // 子弹碰撞检测
					isOutScreenAction(); // 删除出界飞行物及子弹
					checkGameOverAction(); // 检查游戏结束
				}
				repaint(); // 重绘
			}

		}, period, period);
	}

	int flyEnteredIndex = 0; // 飞行物入场计数
	/** 
	 * 游戏难度检查
	 */
	public void rankConfirmAction() {
		gameManager.checkRank(score);
	}

	/**
	 *  飞行物生成
	 */
	public void enterAction() {
		flyEnteredIndex++;
		if (flyEnteredIndex % 40 != 0)
			return;

		FlyObject obj = nextEnemy(); // 随机生成一个飞行物
		enemys = Arrays.copyOf(enemys, enemys.length + 1);
		enemys[enemys.length - 1] = obj;

	}

	/** 
	 * 步事件 
	 */
	public void stepAction() {
		for (int i = 0; i < enemys.length; i++) {
			FlyObject f = enemys[i];
			f.step();
		}

		for (int i = 0; i < bullets.length; i++) {
			Bullet b = bullets[i];
			b.step();
		}

		for (int i = 0; i < ebullets.length; i++) {
			EnemyBullet b = ebullets[i];
			b.step();
		}

		player.step();
	}

	/** 
	 * 飞行物步事件
	 */
	public void flyingStepAction() {
		for (int i = 0; i < enemys.length; i++) {
			FlyObject f = enemys[i];
			f.step();
		}
	}

	int shootIndex = 0; // 射击计数

	/** 
	 * 射击 
	 */
	public void shootAction() {
		shootIndex++;
		if (shootIndex % 30 == 0) { // 每30毫秒发射
			Bullet[] bs = player.shoot();
			bullets = Arrays.copyOf(bullets, bullets.length + bs.length); // 扩容
			System.arraycopy(bs, 0, bullets, bullets.length - bs.length, bs.length); // 追加数组
		}

		for (FlyObject e : enemys) {
			if (!(e instanceof SuperEnemy))
				continue;
			if (e.getY() != 50)
				continue;
			SuperEnemy se = (SuperEnemy) e;
			EnemyBullet[] bs = se.shoot();
			ebullets = Arrays.copyOf(ebullets, ebullets.length + bs.length); // 扩容
			System.arraycopy(bs, 0, ebullets, ebullets.length - bs.length, bs.length); // 追加数组
		}
	}

	/** 
	 * 子弹与飞行物碰撞检测 
	 */
	public void BulletHitAction() {
		for (Bullet b : bullets) { // 遍历所有子弹
			hit(b); // 子弹和飞行物之间的碰撞检查
		}
		for (EnemyBullet eb : ebullets) {
			hitPlayer(eb);
		}

	}

	/** 
	 * 删除越界飞行物及子弹
	 */
	public void isOutScreenAction() {
		int index = 0; // 索引
		FlyObject[] flyingLives = new FlyObject[enemys.length]; // 活着的飞行物
		for (int i = 0; i < enemys.length; i++) {
			FlyObject f = enemys[i];
			if (!f.isOutScreen()) {
				flyingLives[index++] = f; // 不越界的留着
			}
		}
		enemys = Arrays.copyOf(flyingLives, index); // 将不越界的飞行物都留着

		index = 0; // 索引重置为0
		Bullet[] bulletLives = new Bullet[bullets.length];
		for (int i = 0; i < bullets.length; i++) {
			Bullet b = bullets[i];
			if (!b.isOutScreen()) {
				bulletLives[index++] = b;
			}
		}
		bullets = Arrays.copyOf(bulletLives, index); // 将不越界的子弹留着

		index = 0; // 索引重置为0
		EnemyBullet[] ebulletLives = new EnemyBullet[ebullets.length];
		for (int i = 0; i < ebullets.length; i++) {
			EnemyBullet b = ebullets[i];
			if (!b.isOutScreen()) {
				ebulletLives[index++] = b;
			}
		}
		ebullets = Arrays.copyOf(ebulletLives, index); // 将不越界的子弹留着
	}

	/** 
	 * 检查游戏结束 
	 */
	public void checkGameOverAction() {
		if (isGameOver()) {
			state = GAMEOVER; // 改变状态
		}
	}

	/** 
	 * 检查游戏是否结束 
	 */
	public boolean isGameOver() {

		for (int i = 0; i < enemys.length; i++) {
			int index = -1;
			FlyObject obj = enemys[i];
			if (player.hit(obj)) { // 检查玩家与飞行物是否碰撞
				player.subtractLife(); // 减命
				player.setDoubleFire(0); // 双倍火力解除
				index = i; // 记录碰上的飞行物索引
			}
			if (index != -1) {
				deleteEnemyHited(index);

			}
		}

		return player.getLife() <= 0;
	}

	/** 
	 * 子弹和飞行物之间的碰撞检查
	 */
	public void hit(Bullet bullet) {
		int index = -1; // 索引
		for (int i = 0; i < enemys.length; i++) {
			FlyObject obj = enemys[i];
			if (obj.isShootBy(bullet)) { // 判断是否击中
				index = i;
				break;
			}
		}

		if (index == -1) return; // 没击中退出方法
		FlyObject fly = enemys[index]; // 记录被击中的飞行物

		if (fly instanceof SuperEnemy) {		//超级敌人扣血，并销毁子弹
			if (((SuperEnemy) fly).life != 0) {
				((SuperEnemy) fly).life -= 1;
				deleteBulletHited(bullet);
				return;
			}
		}

		deleteEnemyHited(index);
		// 加分,获取奖励
		getScoreAndAward(fly);

		deleteBulletHited(bullet);
	}


	/** 
	 * 随机生成敌人 
	 */
	public static FlyObject nextEnemy() {
		return gameManager.getNextEnemy();		
	}

	
	//以下方法皆为提高可读性所做重构方法
	
	/**Extra Method 删除发生碰撞的子弹*/
	private void deleteBulletHited(Bullet bullet) {
		for (int i = 0; i < bullets.length; i++) {
			if (bullets[i] != bullet)
				continue;
			Bullet temp = bullets[i]; // 被击中的飞行物与最后一交换
			bullets[i] = bullets[bullets.length - 1];
			bullets[bullets.length - 1] = temp;
			bullets = Arrays.copyOf(bullets, bullets.length - 1); // 删除被击中的飞行物
		}
	}
	/**Extra Method 玩家得分与奖励*/
	private void getScoreAndAward(FlyObject fly) {
		if (fly instanceof Enemy) {
			Enemy e = (Enemy) fly;
			score += e.getScore();
		}
		if (fly instanceof Bee) {
			Bee b = (Bee) fly;
			int type = b.getType();
			switch (type) {
			case Award.DOUBLE_FIRE:
				player.addDoubleFire();
				break;
			case Award.LIFE:
				player.addLife();
				break;
			}
		}
	}
	/**Extra Method 删除发生碰撞的敌机*/
	private void deleteEnemyHited(int index) {
		FlyObject temp = enemys[index]; // 被击中的飞行物与最后一交换
		enemys[index] = enemys[enemys.length - 1];
		enemys[enemys.length - 1] = temp;
		enemys = Arrays.copyOf(enemys, enemys.length - 1); // 删除被击中的飞行物
	}
	/**Extra Method 玩家碰撞检测*/
	private void hitPlayer(EnemyBullet eb) {
		// TODO Auto-generated method stub
		if (!player.isShootBy(eb))
			return;

		player.subtractLife();

		deleteEnemyBulletHited(eb);

	}
	/**Extra Method 删除发生碰撞的敌方子弹*/
	private void deleteEnemyBulletHited(EnemyBullet eb) {
		int index = -1;
		for (int i = 0; i < ebullets.length; i++) {
			if (eb == ebullets[i]) {
				index = i;
				break;
			}
		}
		if (index == -1)
			return;
		EnemyBullet e = ebullets[index];
		ebullets[index] = ebullets[ebullets.length - 1];
		ebullets[ebullets.length - 1] = e; // 碰上的与最后一个飞行物交换

		ebullets = Arrays.copyOf(ebullets, ebullets.length - 1); // 删除碰上的飞行物
	}
	/**Extra Method 增大超级敌机的机会*/


}
